{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"autoSnippet.snippets": [
		{"pattern": "*.hpp", "snippet": "Header_file" }
	]

	"Header_file": {
		"prefix": ["header"],
		"body": ["#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP"
					"#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP\n"
					"class ${TM_FILENAME_BASE} {\n"
					"\tprivate:\n"
					"\t\n"
					"\tpublic:\n"
					"\t${TM_FILENAME_BASE}( void );"
					"\t~${TM_FILENAME_BASE}( void );"
					"\t${TM_FILENAME_BASE}( const ${TM_FILENAME_BASE}& original );\n"
					"\t${TM_FILENAME_BASE}& operator=( const ${TM_FILENAME_BASE}& original );\n"
					"};\n"
					"#endif\n"],
		"description": "Standard norm compliant header"
	}

	"base": {
		"prefix": ["base"],
		"body": ["#include \"${TM_FILENAME_BASE}.hpp\"\n"
					"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}( void ){\n\treturn ;\n}\n"
					"${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}( void ){\n\treturn ;\n}\n"
					"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}( const ${TM_FILENAME_BASE}& original ){"
					"\t*this = original;"
					"\treturn ;\n}\n"
					"${TM_FILENAME_BASE}& ${TM_FILENAME_BASE}::operator=( const ${TM_FILENAME_BASE}& original ) {"
					"\tif (this != &original){\n\t\t_value = original._value;\n\t}"
					"\treturn *this;\n}\n"],
		"description": "complete .cpp base"
	}

	"constructor": {
		"prefix": ["constructor"],
		"body": ["${TM_FILENAME_BASE}::${TM_FILENAME_BASE}( void ){\n\treturn ;\n};\n"],
		"description": "basic constructor"
	}

	"destructor": {
		"prefix": ["destructor"],
		"body": ["${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}( void ){\n\treturn ;\n};\n"],
		"description": "basic destructor"
	}

	"copy constructor": {
		"prefix": ["copyconstructor"],
		"body": ["${TM_FILENAME_BASE}::${TM_FILENAME_BASE}( const ${TM_FILENAME_BASE}& original ) {"
					"\t*this = original;"
					"\treturn ;\n}\n"],
		"description": "copy constructor"
	}

	"assignment operator": {
		"prefix": ["assignment"],
		"body": ["${TM_FILENAME_BASE}& ${TM_FILENAME_BASE}::operator=( const ${TM_FILENAME_BASE}& original ) {"
					"\tif (this != &original){\n\t\t_value = original._value;\n\t}"
					"\treturn *this;\n}\n"],
		"description": "copy constructor"
	}
}